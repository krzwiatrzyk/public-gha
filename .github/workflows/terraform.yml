name: Terraform
run-name: Terraform run for ${{ inputs.environment }}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment/workdir name"
        type: string
        required: true
  workflow_call:
    inputs:
      environment:
        type: string
        required: true

jobs:
  plan:
    defaults:
      run:
        working-directory: terraform_environments/${{ inputs.environment }}
    permissions:
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color --out tf_plan.out
      continue-on-error: true
      
    - uses: actions/upload-artifact@v3
      name: Upload plan
      with:
        name: tf_plan_${{ inputs.environment }}
        path: terraform_environments/${{ inputs.environment }}/tf_plan.out
        retention-days: 1

    - name: Set summary
      run: |
        cat << EOF
        #### Terraform Environment ${{ inputs.environment }}
        #### Terraform Initialization ‚öôÔ∏è`${{ steps.init.outcome }}`
        #### Terraform Validation ü§ñ`${{ steps.validate.outcome }}`

        <details><summary>Validation Output</summary>

        ```
        ${{ steps.validate.outputs.stdout }}
        ```

        </details>

        #### Terraform Plan üìñ`${{ steps.plan.outcome }}`

        <details><summary>Show Plan</summary>

        ```
        ${process.env.PLAN}
        ```

        </details>
        EOF

      
    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style') && comment.body.includes('Terraform Environment \`${{ inputs.environment }}\`')
          })

          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Environment \`${{ inputs.environment }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

  apply:
    needs:
    - plan
    if: github.event_name != 'pull_request'
    environment: ${{ inputs.environment }}
    defaults:
      run:
        working-directory: terraform_environments/${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      id: init
      run: terraform init

    - uses: actions/download-artifact@v3
      name: Download plan
      with:
        name: tf_plan_${{ inputs.environment }}
        path: terraform_environments/${{ inputs.environment }}

    - name: Terraform Apply
      id: plan
      run: terraform apply tf_plan.out
      continue-on-error: true